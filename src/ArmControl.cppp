// C++ standard headers
#include <exception>
#include <string>

// Boost headers
#include <boost/shared_ptr.hpp>

// ROS headers
#include <ros/ros.h>
#include <actionlib/client/simple_action_client.h>
#include <control_msgs/FollowJointTrajectoryAction.h>
#include <ros/topic.h>

#include <ArmControl.h>


ArmControl::ArmControl(int argc, char** argv) {
  // Init the ROS node
  ros::init(argc, argv, "run_traj_control");

  ROS_INFO("Starting run_traj_control application ...");
 
  // Precondition: Valid clock
  ros::NodeHandle nh;
  if (!ros::Time::waitForValid(ros::WallDuration(10.0))) // NOTE: Important when using simulated clock
  {
    ROS_FATAL("Timed-out waiting for valid time.");
  }

  // Create an arm controller action client to move the TIAGo's arm
  createArmClient(ArmClient);
}

ArmControl::~ArmControl() {
}

// Create a ROS action client to move TIAGo's arm
void ArmControl::createArmClient(arm_control_client_Ptr& actionClient)
{
  ROS_INFO("Creating action client to arm controller ...");

  actionClient.reset( new arm_control_client("/arm_controller/follow_joint_trajectory") );

  int iterations = 0, max_iterations = 3;
  // Wait for arm controller action server to come up
  while( !actionClient->waitForServer(ros::Duration(2.0)) && ros::ok() && iterations < max_iterations )
  {
    ROS_DEBUG("Waiting for the arm_controller_action server to come up");
    ++iterations;
  }

  if ( iterations == max_iterations )
    throw std::runtime_error("Error in createArmClient: arm controller action server not available");
}

control_msgs::FollowJointTrajectoryGoal ArmControl::prepareGoal(const char * joint, float value) {
	control_msgs::FollowJointTrajectoryGoal goal;
	
	goal.trajectory.joint_names.push_back(joint);
	goal.trajectory.points.resize(1);
	goal.trajectory.points[0].positions.resize(2);
	goal.trajectory.points[0].positions[0] = 0.0;
	goal.trajectory.points[0].positions[1] = value;
	goal.trajectory.points[0].velocities.resize(2);
	goal.trajectory.points[0].velocities[0] = 0.5;
	goal.trajectory.points[0].velocities[1] = 0.5;
	goal.trajectory.points[0].time_from_start = ros::Duration(1.0);
	
	return goal;
}

// Generates a simple trajectory with two waypoints to move TIAGo's arm 
control_msgs::FollowJointTrajectoryGoal ArmControl::waypoints_arm_goal()
{
  control_msgs::FollowJointTrajectoryGoal goal;

  // The joint names, which apply to all waypoints
  goal.trajectory.joint_names.push_back("arm_1_joint");
  goal.trajectory.joint_names.push_back("arm_2_joint");
  goal.trajectory.joint_names.push_back("arm_3_joint");
  goal.trajectory.joint_names.push_back("arm_4_joint");
  goal.trajectory.joint_names.push_back("arm_5_joint");
  goal.trajectory.joint_names.push_back("arm_6_joint");
  goal.trajectory.joint_names.push_back("arm_7_joint");

  // Two waypoints in this goal trajectory
  goal.trajectory.points.resize(2);

  // First trajectory point
  // Positions
  int index = 0;
  goal.trajectory.points[index].positions.resize(7);
  goal.trajectory.points[index].positions[0] = 0.2;
  goal.trajectory.points[index].positions[1] = 0.0;
  goal.trajectory.points[index].positions[2] = -1.5;
  goal.trajectory.points[index].positions[3] = 1.94;
  goal.trajectory.points[index].positions[4] = -1.57;
  goal.trajectory.points[index].positions[5] = -0.5;
  goal.trajectory.points[index].positions[6] = 0.0;
  // Velocities
  goal.trajectory.points[index].velocities.resize(7);
  for (int j = 0; j < 7; ++j)
  {
    goal.trajectory.points[index].velocities[j] = 0.25;
  }
  // To be reached 2 second after starting along the trajectory
  goal.trajectory.points[index].time_from_start = ros::Duration(2.0);

  // Second trajectory point
  // Positions
  index += 1;
  goal.trajectory.points[index].positions.resize(7);
  goal.trajectory.points[index].positions[0] = 2.5;
  goal.trajectory.points[index].positions[1] = 0.2;
  goal.trajectory.points[index].positions[2] = -2.1;
  goal.trajectory.points[index].positions[3] = 1.9;
  goal.trajectory.points[index].positions[4] = 1.0;
  goal.trajectory.points[index].positions[5] = -0.5;
  goal.trajectory.points[index].positions[6] = 0.0;
  // Velocities
  goal.trajectory.points[index].velocities.resize(7);
  for (int j = 0; j < 7; ++j)
  {
    goal.trajectory.points[index].velocities[j] = 0.25;
  }
  // To be reached 4 seconds after starting along the trajectory
  goal.trajectory.points[index].time_from_start = ros::Duration(4.0);
  
  return goal;
}



void ArmControl::execute(control_msgs::FollowJointTrajectoryGoal arm_goal) {
  // Sends the command to start the given trajectory 1s from now
  arm_goal.trajectory.header.stamp = ros::Time::now() + ros::Duration(1.0);
  ArmClient->sendGoal(arm_goal);

  // Wait for trajectory execution
  while(!(ArmClient->getState().isDone()) && ros::ok())
  {
    ros::Duration(1).sleep(); // sleep for four seconds
  }
}



// Entry point
int main(int argc, char** argv)
{
	ArmControl *arm = new ArmControl(argc, argv);
	// Generates the goal for the TIAGo's arm
	//control_msgs::FollowJointTrajectoryGoal arm_goal = arm->waypoints_arm_goal();
	control_msgs::FollowJointTrajectoryGoal arm_goal = arm->prepareGoal("arm_2_joint", 1.1);
	
	arm->execute(arm_goal);


	return EXIT_SUCCESS;
}
